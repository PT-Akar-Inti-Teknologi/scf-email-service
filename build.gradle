plugins {
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'java-library'
    id 'org.sonarqube' version '3.0'
    id 'jacoco'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

apply plugin: 'io.spring.dependency-management'


group = 'bca.mbb'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
def jarName = "fo-upload-consumer"


bootJar {
    archiveFileName = jarName + '.' + archiveExtension.get()
    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date()),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }
}


dependencyManagement {
    imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:2020.0.2"
                mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:2.2.1.RELEASE"
    }
}


dependencies {
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation "org.springframework.cloud:spring-cloud-starter-sleuth"
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    implementation 'io.github.openfeign:feign-jackson:10.2.3'
    implementation 'io.github.openfeign:feign-slf4j:10.2.3'


//    implementation group: 'bca.mbb.lib', name: 'mbb-common-lib', version: '1.0.0'
    compile files('lib\\bca.core\\core-lib\\1.1.1\\3d560d16b21ced905379b4040c8a48ca6bf6697f\\core-lib-1.1.0.jar')
    compile files('lib\\mbb-common-lib-1.2.0.jar')
    compile files('lib\\bca.core\\core-lib\\1.1.1\\3d560d16b21ced905379b4040c8a48ca6bf6697f\\core-lib-1.2.0.jar')
    compile files('lib\\bca.mbbentity.lib.fo-1.0-plain.jar')

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'com.google.code.findbugs:jsr305:3.0.0'
    implementation "io.pivotal.spring.cloud:spring-cloud-services-starter-config-client"

    implementation('io.springfox:springfox-boot-starter:3.0.0')
    implementation('io.springfox:springfox-bean-validators:3.0.0')
    implementation('io.springfox:springfox-swagger-ui:3.0.0')
    implementation('org.hibernate.validator:hibernate-validator-annotation-processor')
    implementation('org.hibernate.validator:hibernate-validator')
    implementation('com.oracle.database.jdbc:ojdbc10:19.10.0.0')
    implementation 'org.apache.kafka:kafka-clients'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation "org.apache.avro:avro:1.11.0"
    implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '6.2.0'

    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.0'
    testImplementation 'org.mockito:mockito-core:3.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.0.0'
    testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'}

test {
    useJUnitPlatform {
        excludeTags 'integration'
    }
    finalizedBy jacocoTestReport
}

task integrationTest(type: Test) {
    check.dependsOn it
    finalizedBy jacocoTestReport
    useJUnitPlatform {
        includeTags 'integration'
    }
    doLast {
        println 'Finish Integration Test'
    }
}

//checkstyle {
//    toolVersion '8.21'
//    configDir = file("$rootProject.projectDir/config/checkstyle")
//    checkstyleTest.enabled = false
//}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            print(report.destination)
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

def coverageExclusions = [
        "**/bca/mbb/**/config/**",
        "**/bca/mbb/**/dto/**",
        "**/bca/mbb/**/model/**",
]

jacocoTestReport() {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusions)
        }))
    }
    executionData(fileTree(buildDir).include("/jacoco/*.exec"))
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "myBCABisnis:mbb-upload-consumer-skeleton:DEV"
        property "sonar.projectName", "MBB Upload Consumer Skeleton[DEV]"
        property "sonar.projectVersion", version

        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.test.binaries", "build/classes/java/test"

        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.coverage.exclusions", coverageExclusions

        property "sonar.exclusions", "**/dto/**/*,**/dto/*,**/entity/**/*,**/entity/*,**/specification/*,**/exception/*,**/config/*,**/serializer/*,**/enums/*"
    }
}

generateAvroJava {
    source("src/main/java/avro")
}
